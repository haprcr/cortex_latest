#-- Copyright 2023 Google LLC
#--
#-- Licensed under the Apache License, Version 2.0 (the "License");
#-- you may not use this file except in compliance with the License.
#-- You may obtain a copy of the License at
#--
#--     https://www.apache.org/licenses/LICENSE-2.0
#--
#-- Unless required by applicable law or agreed to in writing, software
#-- distributed under the License is distributed on an "AS IS" BASIS,
#-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#-- See the License for the specific language governing permissions and
#-- limitations under the License.
steps:
  # init_deployment_config.py leaves the validated config.json file in workspace/config so it's available for other build steps
  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    entrypoint: "bash"
    id: "init_deploy_config"
    args:
      - "-c"
      - |-
        set -e
        echo "Initial configuration ${_CONFIG_FILE}:"
        cat ${_CONFIG_FILE}

        python3 common/init_deployment_config.py \
          --config-file "${_CONFIG_FILE}" \
          --sub-validator ""

        echo "Processed configuration:"
        cat ${_CONFIG_FILE}
        echo -e "\n--------------------------------"

  # Generate required K9 Processing tables in case they don't exist, so as not to break Reporting.
  - name: "gcr.io/kittycorn-public/deploy-kittycorn:v2.0"
    id: "generate_k9_placeholder"
    waitFor: ["init_deploy_config"]
    entrypoint: /bin/bash
    args:
      - "-c"
      - |-
        echo "Creating placeholder K9 Processing tables in case they do not exist."
        set -e
        export PYTHONPATH=$$PYTHONPATH:./src

        if [[ "${_TGT_BUCKET}" != "" ]]
        then
          _TGT_BUCKET_="${_TGT_BUCKET}"
        else
          _TGT_BUCKET_=$(jq -r ."targetBucket" "${_CONFIG_FILE}")
        fi

        common/materializer/deploy.sh \
            --gcs_logs_bucket "${_GCS_BUCKET}" \
            --gcs_tgt_bucket "$${_TGT_BUCKET_}" \
            --module_name "k9" \
            --target_type "processing" \
            --config_file "${_CONFIG_FILE}" \
            --materializer_settings_file config/k9_placeholder_settings.yaml
        echo "âœ… Placeholder K9 Processing tables have been created if they did not exist."

  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    id: "generate_local_k9"
    waitFor: ["init_deploy_config"]
    entrypoint: "bash"
    args:
      - "-c"
      - |-
        if [[ "${_TGT_BUCKET}" != "" ]]
        then
          _TGT_BUCKET_="${_TGT_BUCKET}"
        else
          _TGT_BUCKET_=$(jq -r ."targetBucket" "${_CONFIG_FILE}")
        fi

        bq_object_settings_file="config/reporting_settings_local_k9.yaml"

        # Execute the common report generation script.
        common/materializer/deploy.sh \
            --gcs_logs_bucket "${_GCS_BUCKET}" \
            --gcs_tgt_bucket "$${_TGT_BUCKET_}" \
            --module_name "SAP" \
            --target_type "Reporting" \
            --config_file "${_CONFIG_FILE}" \
            --materializer_settings_file "$${bq_object_settings_file}" \
            --k9_manifest "${_K9_MANIFEST_FILE}"
  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    id: "reporting"
    waitFor: ["generate_k9_placeholder", "generate_local_k9"]
    entrypoint: "bash"
    args:
      - "-c"
      - |-
        _SQL_FLAVOUR_=$(jq -r ."SAP.SQLFlavor" "${_CONFIG_FILE}")

        if [[ "${_TGT_BUCKET}" != "" ]]
        then
          _TGT_BUCKET_="${_TGT_BUCKET}"
        else
          _TGT_BUCKET_=$(jq -r ."targetBucket" "${_CONFIG_FILE}")
        fi

        # Reporting setting file is sql flavor specific.
        bq_object_settings_file="reporting_settings_$${_SQL_FLAVOUR_}.yaml"

        # Execute the common report generation script.
        common/materializer/deploy.sh \
            --gcs_logs_bucket "${_GCS_BUCKET}" \
            --gcs_tgt_bucket "$${_TGT_BUCKET_}" \
            --module_name "SAP" \
            --target_type "Reporting" \
            --config_file "${_CONFIG_FILE}" \
            --materializer_settings_file "$${bq_object_settings_file}"

        # Load annotations
        python3 common/annotations_loader.py --annotations-directory "annotations/${_SQL_FLAVOUR_,,}"
logsBucket: "gs://$_GCS_BUCKET"
timeout: 7200s
substitutions:
  _CONFIG_FILE: "config/config.json"
  _K9_MANIFEST_FILE: "k9_manifest.yaml"
options:
  substitution_option: "ALLOW_LOOSE"
